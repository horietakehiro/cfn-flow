AWSTemplateFormatVersion: 2010-09-09
Description: ---

Parameters: 
  SYSTEM:
    Description: system name
    Type: String
    Default: cfn-flow-test

  ENV:
    Description:  env type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  VpcId:
    Type: String
  PublicSubnetIds:
    Type: CommaDelimitedList


  RootDomainName:
    Type: String
  RootDomainHostedZoneId:
    Type: AWS::Route53::HostedZone::Id


Mappings:
  AppConfig:
    ap-northeast-1:
      AmiId: ami-0df2ca8a354185e1e
      DomainPrefix: origin.primary
    ap-northeast-3:
      AmiId: ami-0171e161a6e0c595c
      DomainPrefix: origin.secondary
      

Resources: 

  AlbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${SYSTEM}-${ENV}-alb-sg
      GroupDescription: sg for alb
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - 
          CidrIp: 0.0.0.0/0
          Description: allow https from all
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      SecurityGroupEgress:
        - 
          CidrIp: 0.0.0.0/0
          Description: allow all
          IpProtocol: -1


  InstanceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${SYSTEM}-${ENV}-instance-sg
      GroupDescription: sg for ec2 instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - 
          Description: allow http from alb
          FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref AlbSg
          ToPort: 80
      SecurityGroupEgress:
        - 
          CidrIp: 0.0.0.0/0
          Description: allow all
          IpProtocol: -1

  InstanceRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /
      RoleName: !Sub ${SYSTEM}-${ENV}-${AWS::Region}-instance-role
  
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - 
            DeviceName: /dev/xvda
            Ebs: 
              VolumeSize: 20
              VolumeType: gp2
        IamInstanceProfile: 
          Arn: !GetAtt InstanceProfile.Arn
        ImageId:
          Fn::FindInMap:
            - AppConfig
            - !Ref AWS::Region
            - AmiId

        InstanceType: t2.micro
        SecurityGroupIds: 
          - !Ref InstanceSg
        UserData:
          Fn::Base64: |
            #!/bin/bash
            systemctl restart amazon-ssm-agent
            systemctl enable amazon-ssm-agent
            amazon-linux-extras install -y nginx1
            systemctl restart nginx
            systemctl enable nginx

      LaunchTemplateName: !Sub ${SYSTEM}-${ENV}-instance-lt

  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub ${SYSTEM}-${ENV}-asg
      DesiredCapacity: 1
      DesiredCapacityType: units
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      # LoadBalancerNames: 
      MaxSize: 1
      MinSize: 1
      TargetGroupARNs: 
        - !Ref AlbTg
      VPCZoneIdentifier: !Ref PublicSubnetIds


  OriginCert:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName:
        Fn::Sub:
          - ${Prefix}.${SYSTEM}.${RootDomainName}
          - Prefix:
              Fn::FindInMap:
                - AppConfig
                - !Ref AWS::Region
                - DomainPrefix
      DomainValidationOptions: 
        - 
          DomainName:
            Fn::Sub:
              - ${Prefix}.${SYSTEM}.${RootDomainName}
              - Prefix:
                  Fn::FindInMap:
                    - AppConfig
                    - !Ref AWS::Region
                    - DomainPrefix

          HostedZoneId: !Ref RootDomainHostedZoneId

      ValidationMethod: DNS


  WwwCert:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Sub www.${SYSTEM}.${RootDomainName}
      DomainValidationOptions: 
        - 
          DomainName: !Sub www.${SYSTEM}.${RootDomainName}
          HostedZoneId: !Ref RootDomainHostedZoneId
      ValidationMethod: DNS


  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      # LoadBalancerAttributes: 
      #   - LoadBalancerAttribute
      Name: !Sub ${SYSTEM}-${ENV}-alb
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref AlbSg
      # SubnetMappings: 
      #   - SubnetMapping
      Subnets: !Ref PublicSubnetIds
      Type: application

  AlbTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200-399
      Name: !Sub ${SYSTEM}-${ENV}-alb-tg
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      # Targets: 
      #   - TargetDescription
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId


  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates: 
        - CertificateArn: !Ref OriginCert
      DefaultActions: 
        - 
          ForwardConfig: 
            TargetGroups: 
              - TargetGroupArn: !Ref AlbTg
          TargetGroupArn: !Ref AlbTg
          Type: forward

      LoadBalancerArn: !Ref Alb
      Port: 443
      Protocol: HTTPS

  AlbListenerCertificate:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties: 
      Certificates: 
        - CertificateArn: !Ref WwwCert
      ListenerArn: !Ref AlbListener


  OriginRecord:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget: 
        DNSName: !GetAtt Alb.DNSName
        HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
      HostedZoneId: !Ref RootDomainHostedZoneId
      Name:
        Fn::Sub:
          - ${Prefix}.${SYSTEM}.${RootDomainName}
          - Prefix:
              Fn::FindInMap:
                - AppConfig
                - !Ref AWS::Region
                - DomainPrefix
      Type: A

Outputs:
  OriginDns:
    Value:
      Fn::Sub:
        - ${Prefix}.${SYSTEM}.${RootDomainName}
        - Prefix:
            Fn::FindInMap:
              - AppConfig
              - !Ref AWS::Region
              - DomainPrefix
  AlbDns:
    Value: !GetAtt Alb.DNSName
  AlbHostedZone:
    Value: !GetAtt Alb.CanonicalHostedZoneID

