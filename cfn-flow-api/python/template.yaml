Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: 2010-09-09
Description: ---
# Metadata: 

Parameters: 
  SolutionName:
    Type: String
    Default: cfn-flow
  EnvName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  UserPoolArn:
    Type: String
  
  ApiDomainName:
    Type: String
  ApiHostedZoneId:
    Type: AWS::Route53::HostedZone::Id


# Mappings: 

# Conditions: 

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 512
    Timeout: 60
    Environment:
      Variables:
        DYNAMO_TEMPLATE_TABLE_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-templates-table
        DYNAMO_TEMPLATE_SUMMARY_TABLE_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-template-summaries-table
        S3_TEMPLATE_BUCKET_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-templates-bucket 
        DYNAMO_FLOW_TABLE_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-flows-table
        S3_FLOW_BUCKET_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-flows-bucket
        DYNAMO_FLOW_PLANS_TABLE_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-flow-plans-table
        DYNAMO_FLOW_PLANS_GSI_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-flow-plans-gsi

    Tracing: Active
    Layers:
      - !Ref UtilLayer
    Architectures:
      - x86_64
    EphemeralStorage:
      Size: 512
    

Resources:


  UtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layers/utils/
      CompatibleRuntimes:
        - python3.9
      CompatibleArchitectures:
        - x86_64
      LayerName: !Sub ${SolutionName}-${EnvName}-util-layer
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.9

  CfnUtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layers/cfn_utils/
      CompatibleRuntimes:
        - python3.9
      CompatibleArchitectures:
        - x86_64
      LayerName: !Sub ${SolutionName}-${EnvName}-cfn-util-layer
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.9


  FunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      # Policies:


  ListTemplates:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/templates/
      Events:
        # CatchAll:
        #   Type: Api
        #   Properties:
        #     Path: "/{proxy+}"
        #     Method: ANY      
        #     RestApiId:  !Ref BackendApi
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /templates
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-templates-list-function
      Handler: list_templates.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn

  PutTemplate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/templates/
      Events:
        PutApi:
          Type: Api
          Properties:
            Method: put
            Path: /templates/{templateName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-templates-put-function
      Handler: put_template.lambda_handler
      Layers:
        - !Ref CfnUtilLayer
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn

  GetTemplate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/templates/
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /templates/{templateName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-template-get-function
      Handler: get_template.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn


  GetTemplateSummary:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/templates/
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /templates/{templateName}/{sectionName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-template-summary-get-function
      Handler: get_template_summary.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn


  DeleteTemplate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/templates/
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: delete
            Path: /templates/{templateName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-template-delete-function
      Handler: delete_template.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn




  ListFlows:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/flows/
      Events:
        # CatchAll:
        #   Type: Api
        #   Properties:
        #     Path: "/{proxy+}"
        #     Method: ANY      
        #     RestApiId:  !Ref BackendApi
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /flows
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-flows-list-function
      Handler: list_flows.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn

  PutFlow:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/flows/
      Events:
        PutApi:
          Type: Api
          Properties:
            Method: put
            Path: /flows/{flowName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-flows-put-function
      Handler: put_flow.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn

  GetFlow:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/flows/
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /flows/{flowName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-flow-get-function
      Handler: get_flow.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn



  ListStacks:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/stacks/
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /stacks/{regionName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-stacks-list-function
      Handler: list_stacks.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn

  PostStackTemplate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/stacks/
      Events:
        PutApi:
          Type: Api
          Properties:
            Method: post
            Path: /stacks/{regionName}/{stackName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-stacks-post-template-function
      Handler: post_stack_template.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn

  DeleteFlow:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/flows/
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: delete
            Path: /flows/{flowName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-flow-delete-function
      Handler: delete_flow.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn



  ListPlans:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/plans/
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /flows/{flowName}/plans
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-plans-list-function
      Handler: list_plans.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn

  PutPlans:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/plans/
      Events:
        PutApi:
          Type: Api
          Properties:
            Method: put
            Path: /flows/{flowName}/plans/{planName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-plans-put-function
      Handler: put_plan.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn

  DeletePlan:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./functions/plans/
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: delete
            Path: /flows/{flowName}/plans/{planName}
            RestApiId:  !Ref BackendApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-plans-delete-function
      Handler: delete_plan.lambda_handler
      PackageType: Zip
      Role: !GetAtt FunctionsRole.Arn


  BackendApiCert:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref ApiDomainName
      DomainValidationOptions: 
        - 
          DomainName: !Ref ApiDomainName
          HostedZoneId: !Ref ApiHostedZoneId
      ValidationMethod: DNS


  BackendApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: REGIONAL
      StageName: !Ref EnvName
      Name: !Sub ${SolutionName}-${EnvName}-backend-api
      # BinaryMediaTypes:
        # - ""
      Cors:
        # AllowCredentials: true
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,GET,PUT,POST,DELETE'"
        AllowOrigin: "'*'"

      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !Ref UserPoolArn
      Domain:
        BasePath: !Ref EnvName
        CertificateArn: !Ref BackendApiCert
        DomainName: !Ref ApiDomainName
        EndpointConfiguration: REGIONAL
        Route53:
          EvaluateTargetHealth: false
          HostedZoneId: !Ref ApiHostedZoneId
      TracingEnabled: true


Outputs:
  BackendApiHttpUrl:
    Description: https url for backend api
    Value: !Sub https://${ApiDomainName}/${EnvName}
    