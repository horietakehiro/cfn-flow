Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: 2010-09-09
Description: ---
# Metadata: 

Parameters: 
  SolutionName:
    Type: String
    Default: cfn-flow
  EnvName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  UserPoolArn:
    Type: String


# Mappings: 

# Conditions: 

Globals:
  Function:
    Runtime: python3.9
    CodeUri: ./functions/templates/
    MemorySize: 512
    Timeout: 60
    Environment:
      Variables:
        DYNAMO_TEMPLATE_TABLE_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-templates-table
        DYNAMO_TEMPLATE_SUMMARY_TABLE_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-template-summaries-table
        S3_TEMPLATE_BUCKET_NAME:
          Fn::ImportValue: !Sub ${SolutionName}-${EnvName}-templates-bucket 
    Tracing: Active
    Layers:
      - !Ref UtilLayer
    Architectures:
      - x86_64
    EphemeralStorage:
      Size: 512
    

Resources:


  UtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layers/utils/
      CompatibleRuntimes:
        - python3.9
      CompatibleArchitectures:
        - x86_64
      LayerName: !Sub ${SolutionName}-${EnvName}-util-layer
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.9

  CfnUtilLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./layers/cfn_utils/
      CompatibleRuntimes:
        - python3.9
      CompatibleArchitectures:
        - x86_64
      LayerName: !Sub ${SolutionName}-${EnvName}-cfn-util-layer
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.9


  TemplatesFunctionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      # Policies:


  ListTemplates:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: "/{proxy+}"
            Method: ANY      
            RestApiId:  !Ref TemplatesApi
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /templates
            RestApiId:  !Ref TemplatesApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-templates-list-function
      Handler: list_templates.lambda_handler
      PackageType: Zip
      Role: !GetAtt TemplatesFunctionsRole.Arn

  PutTemplate:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        PutApi:
          Type: Api
          Properties:
            Method: put
            Path: /templates/{templateName}
            RestApiId:  !Ref TemplatesApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-templates-put-function
      Handler: put_template.lambda_handler
      Layers:
        - !Ref CfnUtilLayer
      PackageType: Zip
      Role: !GetAtt TemplatesFunctionsRole.Arn

  GetTemplate:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /templates/{templateName}
            RestApiId:  !Ref TemplatesApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-template-get-function
      Handler: get_template.lambda_handler
      PackageType: Zip
      Role: !GetAtt TemplatesFunctionsRole.Arn


  GetTemplateSummary:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: get
            Path: /templates/{templateName}/{sectionName}
            RestApiId:  !Ref TemplatesApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-template-summary-get-function
      Handler: get_template_summary.lambda_handler
      PackageType: Zip
      Role: !GetAtt TemplatesFunctionsRole.Arn


  DeleteTemplate:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        GetApi:
          Type: Api
          Properties:
            Method: delete
            Path: /templates/{templateName}
            RestApiId:  !Ref TemplatesApi
      FunctionName: !Sub ${SolutionName}-${EnvName}-template-delete-function
      Handler: delete_template.lambda_handler
      PackageType: Zip
      Role: !GetAtt TemplatesFunctionsRole.Arn

  TemplatesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref EnvName
      Name: !Sub ${SolutionName}-${EnvName}-templates-api
      # BinaryMediaTypes:
        # - ""
      Cors:
        # AllowCredentials: true
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'OPTIONS,GET,PUT,POST,DELETE'"
        AllowOrigin: "'*'"

      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !Ref UserPoolArn

Outputs:
  TemplatesHttpUrl:
    Description: https url for templates api
    Value: !Sub https://${TemplatesApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvName}
    